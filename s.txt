const { MongoClient, ServerApiVersion } = require('mongodb');
const uri = "mongodb+srv://Team17:Team17@themealmine.tlnklwt.mongodb.net/?retryWrites=true&w=majority";
const client = new MongoClient(uri, { useNewUrlParser: true, useUnifiedTopology: true, serverApi: ServerApiVersion.v1 });

client.connect(err => {		
	const collection = client.db("TheMealMine").collection("UserAccounts");
	console.log("Connected to MongoDB");
});

const express = require("express");
	app = express(),
  	port = process.env.PORT || 5000,
  	cors = require('cors');

const corsOptions = {
    origin:'http://localhost:3000', 
    credentials:true,
    optionSuccessStatus:200
}

app.use(cors(corsOptions));

app.use(express.json());
app.listen(port, () => console.log("Backend server live on " + port));

const routes = express.Router();

routes.route("/listings").get(async function (req, res) {
  const dbConnect = dbo.getDb();

  dbConnect
    .collection("UserAccounts")
    .find({}).limit(50)
    .toArray(function (err, result) {
      if (err) {
        res.status(400).send("Error fetching listings!");
     } else {
        res.json(result);
      }
    });
});

app.post('/addUser', (req, res) => {
  const form = {
    user: req.body.user,
    pass: req.body.pass,
    email: req.body.email
  };
  client.db("TheMealMine").collection("UserAccounts").insertOne(form, function (err, result) {});
});

app.post('/getUser', (req,res) => {
	const form = {
		user: req.body.user,
		pass: req.body.pass
	};
	//Update below command to find singular user with particular username and password
	client.db("TheMealMine").collection("UserAccounts").find({}).limit(1).toArray(function (err,result) {});
}
routes.route("/listings/updateUser").post(function (req, res) {
  const dbConnect = dbo.getDb();
  const listingQuery = { _id: req.body.id };
  const updates = {
    $inc: {
      likes: 1
    }
  };

  dbConnect
    .collection("UserAccounts")
    .updateOne(listingQuery, updates, function (err, _result) {
      if (err) {
        res.status(400).send(`Error updating likes on listing with id ${listingQuery.id}!`);
      } else {
        console.log("1 document updated");
      }
    });
});

routes.route("/listings/delete/:id").delete((req, res) => {
  const dbConnect = dbo.getDb();
  const listingQuery = { listing_id: req.body.id };

  dbConnect
    .collection("UserAccounts")
    .deleteOne(listingQuery, function (err, _result) {
      if (err) {
        res.status(400).send(`Error deleting listing with id ${listingQuery.listing_id}!`);
      } else {
        console.log("1 document deleted");
      }
    });
});